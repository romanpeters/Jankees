---
- name: Reboot router
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../vault.yml

  tasks:
    - name: Check if there is internet connectivity
      uri:
        url: https://google.com
        status_code: 200
      register: internet_check
      ignore_errors: true

    - name: Get CSRFToken
      ansible.builtin.uri:
        url: http://{{ hostvars['router']['ansible_host'] }}/cgi-bin/reboot.sh
        validate_certs: false
        user: "{{ router_username }}"
        password: "{{ router_password }}"
        method: GET
        return_content: true
        status_code: 200
      register: page_response
      when: internet_check.failed

    - name: Extract CSRFToken
      ansible.builtin.set_fact:
        csrf_token: "{{ page_response.content | regex_findall('name=\"CSRFToken\" lang=\"en\" value=\"(.*?)\"') | first }}"
      when: internet_check.failed

    - name: Reboot router
      ansible.builtin.uri:
        url: http://{{ hostvars['router']['ansible_host'] }}/cgi-bin/reboot.sh
        validate_certs: false
        user: admin
        password: "{{ router_password }}"
        method: POST
        force_basic_auth: true
        status_code: 200
        body_format: form-urlencoded
        body:
          CSRFToken: "{{ csrf_token }}"
          reboot: Reboot
      when: internet_check.failed
      notify:
        - Wait for router to shutdown
        - Wait until back online

  handlers:
    - name: Wait for the router to shutdown
      ansible.builtin.wait_for:
        timeout: 30

    - name: Wait until back online
      ansible.builtin.uri:
        url: http://{{ hostvars['router']['ansible_host'] }}/
        return_content: true
        status_code:
          - 401
      until: uri_output.status == 401
      retries: 120 # Retries for 120 * 5 seconds = 10 minutes
      delay: 5
      register: uri_output
